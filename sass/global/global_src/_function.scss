// ------------------------------------------------------------
// Base: Function
// ------------------------------------------------------------
@mixin max-screen($width) {
    @media only screen and (max-width: $width) {
        @content;
    }
}
@mixin min-screen($width) {
    @media only screen and (min-width: $width) {
        @content;
    }
}

@mixin fn-tbl {
    display: table !important;
    width: 100%;
    table-layout: fixed;
}
@mixin fn-tblcell {
    display: table-cell !important;
    position: relative;
    width: 100%;
    height: 100%;
    vertical-align: middle;
}
@mixin fn-text-ellipsis {
    overflow: hidden;
    word-wrap: normal;
    white-space: nowrap;
    -o-text-overflow: ellipsis;
    text-overflow: ellipsis;
}
//在:before或者 :after中继承使用
%border-bottom{
	content: ""; 
	position: absolute;
	right: 0; 
	bottom: 0; 
	left: 0; 
	height: 1px; 
	-webkit-transform: scaleY(.5); 
	transform: scaleY(.5); 
	background-color: #c8c7cc;	
}
%border-top{
	content: ""; 
	position: absolute;
	right: 0; 
	top: 0; 
	left: 0; 
	height: 1px; 
	-webkit-transform: scaleY(.5); 
	transform: scaleY(.5); 
	background-color: #c8c7cc;	
}
//去掉一个值的单位，如12px => 12
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

//PX转换REM
@function pxTorem($target-size, $context:$baseRootFontSize) {
	@if not unitless($target-size) {
		$target-size: strip-units($target-size);
	}
	@if not unitless($context) {
		$context: strip-units($context);
	}
	@return ($target-size / $context) * 1rem;
}
//计算屏幕小于375时进行调整 一般用于图片大小及边距的调整，等比缩小的情况 返回px值
@function imgpxTorem($target-size) {
	$rem:pxTorem($target-size);
	@return ($rem*32/1rem)*1px;
}